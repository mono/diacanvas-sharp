// CanvasLine.Custom - customizations
//
// Author: Martin Willemoes Hansen <mwh@sysrq.dk>
//
// Copyright (C) 2003 Martin Willemoes Hansen
//
// This code is inserted after the automatically generated code.

public CanvasLine() {
        Raw = ItemCreate (CanvasLine.GType).Handle;
}

// Takes care of constructing the Line when its going to be placed with a
// PlacementTool.

[DllImport("diacanvas2")]
extern static IntPtr dia_placement_tool_new (uint object_type, 
					     IntPtr dummy);
public static PlacementTool PlacementTool()
{
	return new PlacementTool (dia_placement_tool_new (CanvasLine.GType, 
							  IntPtr.Zero));
}

[DllImport("diacanvas2")]
extern static IntPtr dia_placement_tool_new (uint object_type,
					     IntPtr lw, double line_width,
					     IntPtr col, ulong color,
					     IntPtr dummy);
public static PlacementTool PlacementTool (double line_width, ulong color)
{
	return new PlacementTool (dia_placement_tool_new (CanvasLine.GType, 
			 Marshal.StringToHGlobalAnsi ("line_width"), line_width,
			 Marshal.StringToHGlobalAnsi ("color"), color,
			 IntPtr.Zero));
}

// Struct marshalling bug workaround

[DllImport ("diasharpglue")]
extern static void diasharp_canvas_line_set_point_property (IntPtr line,
							    string property,
							    double x, double y);

public Dia.Point HeadPos {
	get { return GetPointProperty ("head_pos"); }
	set { SetPointProperty ("head_pos", value); }
}

public Dia.Point TailPos {
	get { return GetPointProperty ("tail_pos"); }
	set { SetPointProperty ("tail_pos", value); }
}

Dia.Point GetPointProperty (string property) {
	GLib.Value val = new GLib.Value (Handle, property);
	GetProperty(property, val);
	System.IntPtr raw_ret = (System.IntPtr) (GLib.Boxed) val;
	Dia.Point ret = Dia.Point.New (raw_ret);
	return ret;
}

void SetPointProperty (string property, Dia.Point point) {
	diasharp_canvas_line_set_point_property (Handle, property, 
						 point.x, point.y);
}



