<Type Name="CanvasLine" FullName="Dia.CanvasLine">
  <TypeSignature Language="C#" Value="public class CanvasLine : Dia.CanvasItem, IWrapper, IDisposable" Maintainer="auto" />
  <AssemblyInfo>
    <AssemblyName>diacanvas-sharp</AssemblyName>
    <AssemblyPublicKey />
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
    <AssemblyCulture>neutral</AssemblyCulture>
    <Attributes />
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Docs>
    <summary>A simple line with a connectable <see cref="T:Dia.Handle" /> on both ends.</summary>
    <remarks>
      <example>
        <code lang="C#">
	Dia.CanvasLine line = new Dia.CanvasLine();
        line.LineWidth = 10;
        line.Color = 8327327;
        line.Dash = new DashStyle (10);
        line.HeadPos = new Dia.Point (50, 50);;
        line.TailPos = new Dia.Point (100, 150);
        line.Cap = Dia.CapStyle.Butt;
        line.Move (100, 150);
	Dia.Canvas canvas = new Dia.Canvas();
	canvas.Root.Add (line);
	</code>
      </example>
    </remarks>
  </Docs>
  <Base>
    <BaseTypeName>Dia.CanvasItem</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>GLib.IWrapper</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes />
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="protected override void Finalize ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disposes the resources associated with the object.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetClosestSegment">
      <MemberSignature Language="C#" Value="public int GetClosestSegment (double x, double y);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <summary>
	Get the segment that is closest to the point described by (x, y).
	</summary>
        <param name="x">a <see cref="T:System.Double" /> representing the x coordinate.</param>
        <param name="y">a <see cref="T:System.Double" /> representing the y coordinate.</param>
        <returns>a <see cref="T:System.Int32" /></returns>
        <remarks>x and y should be in item coordinates.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CanvasLine (GLib.Type gtype);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="gtype" Type="GLib.Type" />
      </Parameters>
      <Docs>
        <summary>Internal constructor.</summary>
        <param name="gtype">a <see cref="T:GLib.Type" /> for the this type.</param>
        <returns>a <see cref="T:Dia.CanvasLine" /> created using the provided <see cref="T:GLib.Type" />.</returns>
        <remarks>This is a constructor used by derivative types that would have their own <see cref="T:GLib.Type" /> assigned to it. This is not typically used by C# code.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CanvasLine (IntPtr raw);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="raw" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <summary>Internal constructor.</summary>
        <param name="raw">a <see cref="T:System.IntPtr" /> to the C object.</param>
        <returns>a <see cref="T:Dia.CanvasLine" /> wrapping the C object.</returns>
        <remarks>This is an internal constructor, and should not be used by user code.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CanvasLine ();" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>Create a new <see cref="T:Dia.CanvasLine" />.</summary>
        <returns>a <see cref="T:Dia.CanvasLine" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GType">
      <MemberSignature Language="C#" Value="public static uint GType { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the Type for the <see cref="T:Dia.CanvasLine" /></summary>
        <returns>A <see cref="T:System.UInt32" /> number representing the <see cref="GLib.Type" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPoint">
      <MemberSignature Language="C#" Value="public Dia.Point AddPoint { set; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Dia.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Add a point to the end of the line.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TailColor">
      <MemberSignature Language="C#" Value="public ulong TailColor { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets or sets the color (RGBA) of the tail of the line.</summary>
        <returns>a <see cref="T:System.UInt64" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cyclic">
      <MemberSignature Language="C#" Value="public bool Cyclic { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets or gets, if the line is cyclic ie. a polygon.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeadColor">
      <MemberSignature Language="C#" Value="public ulong HeadColor { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets or gets the color (RGBA) of the head of the line.</summary>
        <returns>a <see cref="T:System.UInt64" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeadB">
      <MemberSignature Language="C#" Value="public double HeadB { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
	Sets or gets the distance from tip of arrowhead 
	to trailing point, measured along the shaft.
	</summary>
        <returns>a <see cref="T:System.Double" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeadC">
      <MemberSignature Language="C#" Value="public double HeadC { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
	Sets or gets the distance of trailing point 
	from the shaft (bottom half).
	</summary>
        <returns>a <see cref="T:System.Double" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeadD">
      <MemberSignature Language="C#" Value="public double HeadD { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
	Sets or gets the distance of trailing point 
	from the shaft (top half).
	</summary>
        <returns>a <see cref="T:System.Double" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DelSegment">
      <MemberSignature Language="C#" Value="public uint DelSegment { set; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delete line segment.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Color">
      <MemberSignature Language="C#" Value="public ulong Color { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets or gets the color (RGBA) of the line.</summary>
        <returns>a <see cref="T:System.UInt64" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TailB">
      <MemberSignature Language="C#" Value="public double TailB { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>	
	Sets or gets the distance from tip of arrowhead 
	to trailing point, measured along the shaft.
	</summary>
        <returns>a <see cref="T:System.Double" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LineWidth">
      <MemberSignature Language="C#" Value="public double LineWidth { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets or gets the width of the line.</summary>
        <returns>a <see cref="T:System.Double" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cap">
      <MemberSignature Language="C#" Value="public Dia.CapStyle Cap { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Dia.CapStyle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets or gets the <see cref="T:Dia.CapStyle" /> for the line-end.</summary>
        <returns>a <see cref="T:Dia.CapStyle" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TailFillColor">
      <MemberSignature Language="C#" Value="public ulong TailFillColor { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets or gets the color (RGBA) of the interior of the line tail.</summary>
        <returns>a <see cref="T:System.UInt64" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeadA">
      <MemberSignature Language="C#" Value="public double HeadA { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets or gets the distance from tip of arrowhead to the center point.</summary>
        <returns>a <see cref="T:System.Double" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dash">
      <MemberSignature Language="C#" Value="public Dia.DashStyle Dash { set; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Dia.DashStyle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Set <see cref="T:Dia.DashStyle" /> for the line.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Orthogonal">
      <MemberSignature Language="C#" Value="public bool Orthogonal { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets or gets if the line should be an orthogonal line or not.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TailA">
      <MemberSignature Language="C#" Value="public double TailA { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets or gets the distance from tip of arrowhead to the center point.</summary>
        <returns>a <see cref="T:System.Double" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TailC">
      <MemberSignature Language="C#" Value="public double TailC { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
	Sets or gets the distance of trailing point 
	from the shaft (bottom half).
	</summary>
        <returns>a <see cref="T:System.Double" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TailD">
      <MemberSignature Language="C#" Value="public double TailD { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
	Sets or gets the distance of trailing point 
	from the shaft (top half).
	</summary>
        <returns>a <see cref="T:System.Double" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeadFillColor">
      <MemberSignature Language="C#" Value="public ulong HeadFillColor { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets or gets the color (RGBA) of the interior of the line head.</summary>
        <returns>a <see cref="T:System.UInt64" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddSegment">
      <MemberSignature Language="C#" Value="public uint AddSegment { set; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Add a segment by splitting the given segment into two.</summary>
        <returns>a <see cref="T:System.UInt32" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasTail">
      <MemberSignature Language="C#" Value="public bool HasTail { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets or gets if the line has a tail.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasHead">
      <MemberSignature Language="C#" Value="public bool HasHead { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets or gets if the line has a head.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public Dia.JoinStyle Join { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Dia.JoinStyle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
	Sets or gets the <see cref="T:Dia.JoinStyle" /> 
	of the line's corners.
	</summary>
        <returns>a <see cref="T:Dia.JoinStyle" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Horizontal">
      <MemberSignature Language="C#" Value="public bool Horizontal { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
	Sets or gets if the first segment of the 
	orthogonal line should be horizontal.
	</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeadPos">
      <MemberSignature Language="C#" Value="public Dia.Point HeadPos { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Dia.Point</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets or gets the position of the line head.</summary>
        <returns>a <see cref="T:Dia.Point" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TailPos">
      <MemberSignature Language="C#" Value="public Dia.Point TailPos { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Dia.Point</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets or gets the position of the line tail.</summary>
        <returns>a <see cref="T:Dia.Point" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>