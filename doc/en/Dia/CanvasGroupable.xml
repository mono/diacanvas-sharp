<Type Name="CanvasGroupable" FullName="Dia.CanvasGroupable">
  <TypeSignature Language="C#" Value="public abstract interface CanvasGroupable" Maintainer="auto" />
  <AssemblyInfo>
    <AssemblyName>diacanvas-sharp</AssemblyName>
    <AssemblyPublicKey />
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
    <AssemblyCulture>neutral</AssemblyCulture>
    <Attributes />
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Docs>
    <summary>
      <see cref="T:Dia.CanvasItem" />'s implementing 
    this interface can have child objects in them,
    which will be displayed on the 
    <see cref="T:Dia.CanvasView" /> as a seperate object.
    </summary>
    <remarks>
    </remarks>
  </Docs>
  <Base />
  <Interfaces>
    <Interface>
      <InterfaceName>GLib.IWrapper</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes />
  <Members>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual bool Remove (Dia.CanvasItem item);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="Dia.CanvasItem" />
      </Parameters>
      <Docs>
        <summary>Remove an item from the <see cref="T:Dia.CanvasGroupable" /> object.</summary>
        <param name="item">The <see cref="T:Dia.CanvasItem" /> which should removed.</param>
        <returns>a <see cref="T:System.Boolean" /> which is true if the item is removed, false otherwise.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddConstruction">
      <MemberSignature Language="C#" Value="public virtual void AddConstruction (Dia.CanvasItem item);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="Dia.CanvasItem" />
      </Parameters>
      <Docs>
        <summary>
	*DEPRICATED* Used to add child items 
	during the construction of an object.
	</summary>
        <param name="item">a <see cref="T:Dia.CanvasItem" /> to be added.</param>
        <remarks>
	Do not use this method anymore, instead use 
	<see cref="P:Dia.CanvasItem.Parent" /> or
	<see cref="P:Dia.CanvasItem.ChildOf" />.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIter">
      <MemberSignature Language="C#" Value="public virtual bool GetIter (Dia.CanvasIter iter);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iter" Type="Dia.CanvasIter" />
      </Parameters>
      <Docs>
        <summary>Get an iterator for the groupable object.</summary>
        <param name="iter">a <see cref="T:Dia.CanvasIter" /></param>
        <returns>a <see cref="T:System.Boolean" /> which is true if an iterator is set, false otherwise.</returns>
        <remarks>
	This works the same as the text iterator 
	and the tree iterator in GTK+. 
	You can get the actual item by calling 
	<see cref="M:Dia.CanvasGroupable.Value" />. 
	The iterator can be set to the next item with 
	<see cref="M:Dia.CanvasGroupable.Next" />.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="Next">
      <MemberSignature Language="C#" Value="public virtual bool Next (Dia.CanvasIter iter);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iter" Type="Dia.CanvasIter" />
      </Parameters>
      <Docs>
        <summary>Make the iterator point to the next item.</summary>
        <param name="iter">a <see cref="T:Dia.CanvasIter" /></param>
        <returns>
	a <see cref="T:System.Boolean" /> which is true if 
	the iterator points to a valid object, false otherwise.
	</returns>
        <remarks>
	If no more items are left then false is returned and
	the iterator is automatically destroyed.
	If you quit iterating before the last item is requested, 
	make sure you call <see cref="M:Dia.CanvasIter.Destroy" />.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual bool Add (Dia.CanvasItem item);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="Dia.CanvasItem" />
      </Parameters>
      <Docs>
        <summary>Add an item to the <see cref="T:Dia.CanvasGroupable" /> object.</summary>
        <param name="item">The <see cref="T:Dia.CanvasItem" /> which should be added.</param>
        <returns>a <see cref="T:System.Boolean" /> which is true if the item is added, false otherwise.</returns>
        <remarks>
	This method should take care of setting 
	<see cref="P:Dia.CanvasItem.Parent" /> and 
	<see cref="P:Dia.CanvasItem.Canvas" />.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveDestruction">
      <MemberSignature Language="C#" Value="public virtual void RemoveDestruction (Dia.CanvasItem item);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="Dia.CanvasItem" />
      </Parameters>
      <Docs>
        <summary>
	*DEPRICATED* Used during the dispose phase of the destruction.
	The item is properly disconnected from the parent.
	</summary>
        <param name="item">a <see cref="T:Dia.CanvasItem" /> to be removed.</param>
        <remarks>
	Do not use this method anymore, instead use 
	<see cref="P:Dia.CanvasItem.Parent" /> or
	<see cref="P:Dia.CanvasItem.ChildOf" />.
	Note that this method should be used when 
	<see cref="M:Dia.CanvasGroupable.AddConstruction" /> is used. 
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public virtual int Length ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
	The amount of <see cref="T:Dia.CanvasItem" />'s 
	the groupable object holds.
	</summary>
        <returns>a <see cref="T:System.Int32" />, which is the length, if error -1.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public virtual Dia.CanvasItem Value (Dia.CanvasIter iter);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Dia.CanvasItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iter" Type="Dia.CanvasIter" />
      </Parameters>
      <Docs>
        <summary>Retrieve the value pointed to by the iterator.</summary>
        <param name="iter">a <see cref="T:Dia.CanvasIter" /></param>
        <returns>a <see cref="T:Dia.CanvasItem" /> which is the value.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pos">
      <MemberSignature Language="C#" Value="public virtual int Pos (Dia.CanvasItem item);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="Dia.CanvasItem" />
      </Parameters>
      <Docs>
        <summary>Get the position of item in  the groupable object.</summary>
        <param name="item">a <see cref="T:Dia.CanvasItem" /></param>
        <returns>a <see cref="T:System.Int32" />, which is the position, on error -1.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Removed">
      <MemberSignature Language="C#" Value="public virtual event DiaSharp.RemovedHandler Removed;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>DiaSharp.RemovedHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>A child has been removed.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Added">
      <MemberSignature Language="C#" Value="public virtual event DiaSharp.AddedHandler Added;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>DiaSharp.AddedHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>A child has been added.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>