<Type Name="Canvas" FullName="Dia.Canvas">
  <TypeSignature Language="C#" Value="public class Canvas : GLib.Object, IWrapper, IDisposable" Maintainer="auto" />
  <AssemblyInfo>
    <AssemblyName>diacanvas-sharp</AssemblyName>
    <AssemblyPublicKey>
    </AssemblyPublicKey>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
    <AssemblyCulture>neutral</AssemblyCulture>
    <Attributes />
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Docs>
    <summary>
      <see cref="T:Dia.Canvas" /> holds the data structure 
    that represents the content that is displayed in a 
    <see cref="T:Dia.CanvasView" />. One <see cref="T:Dia.Canvas" /> 
    can have zero or more <see cref="T:Dia.CanvasView" />s.
    </summary>
    <remarks>
    The actual objects on the <see cref="T:Dia.Canvas" />
    are represented by <see cref="T:Dia.CanvasItem" /> objects. 
    The <see cref="T:Dia.Canvas" /> itself only holds the 
    upper most <see cref="T:Dia.CanvasItem" />  and it holds 
    some generic properties, like grid information and undo 
    information. A constraint <see cref="T:Dia.Solver" /> is 
    also placed in <see cref="T:Dia.Canvas" />.
    </remarks>
  </Docs>
  <Base>
    <BaseTypeName>GLib.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>GLib.IWrapper</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes />
  <Members>
    <Member MemberName="PopRedo">
      <MemberSignature Language="C#" Value="public void PopRedo ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Opposite of <see cref="M:Dia.Canvas.PopUndo" />.</summary>
        <remarks>Undone actions are undone themselves.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreservePropertyLast">
      <MemberSignature Language="C#" Value="public void PreservePropertyLast (GLib.Object objekt, string property_name);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objekt" Type="GLib.Object" />
        <Parameter Name="property_name" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>
	Does the same as <see cref="M:Dia.Canvas.PreserveProperty" />, 
	but adds it to the end of the list, instead of the beginning.
	</summary>
        <param name="objekt">The <see cref="T:GLib.Object" /> that should be undone.</param>
        <param name="property_name">a <see cref="T:System.String" /> describing a property name.</param>
        <remarks>
	This kind of behaviour is needed for some special actions, 
	but won't be used in normal usage.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreserveProperty">
      <MemberSignature Language="C#" Value="public void PreserveProperty (GLib.Object objekt, string property_name);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objekt" Type="GLib.Object" />
        <Parameter Name="property_name" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>This is an easy way to save properties.</summary>
        <param name="objekt">The <see cref="T:GLib.Object" /> that should be undone.</param>
        <param name="property_name">a <see cref="T:System.String" /> describing a property name.</param>
        <remarks>
	The value of the property is preserved so the change can be undone by 
	<see cref="M:Dia.Canvas.PopUndo" />.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearRedo">
      <MemberSignature Language="C#" Value="public void ClearRedo ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clear the redo stack.</summary>
        <remarks>
	This should be automatically done after an
	interactive operation on the canvas, for example 
	a <see cref="T:Dia.CanvasItem" /> is moved.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="PushUndo">
      <MemberSignature Language="C#" Value="public void PushUndo (string optional_comment);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optional_comment" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>
	Push a bunch of preserved values on the undo stack.</summary>
        <param name="optional_comment">a <see cref="T:System.String" /> for an optional comment.</param>
        <remarks>
	If no values are stored using <see cref="M:Dia.Canvas.Preserve" /> 
	or <see cref="M:Dia.Canvas.PreserveProperty" />, nothing is pushed 
	on the stack.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestUpdate">
      <MemberSignature Language="C#" Value="public void RequestUpdate ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ask the <see cref="T:Dia.Canvas" /> to schedule a update handler.</summary>
        <remarks>
	The actual update will happen during idle time 	or if 
	<see cref="M:Dia.Canvas.UpdateNow" /> is called.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="SnapToGridCoordinates">
      <MemberSignature Language="C#" Value="public void SnapToGridCoordinates (out double x, out double y);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" RefType="out" />
        <Parameter Name="y" Type="System.Double" RefType="out" />
      </Parameters>
      <Docs>
        <summary>
	Converts coordinates on the <see cref="T:Dia.Canvas" /> 
	to grid coordinates.
	</summary>
        <param name="x">a <see cref="T:System.Double" /></param>
        <param name="y">a <see cref="T:System.Double" /></param>
        <remarks>
	If <see cref="P:Dia.Canvas.SnapToGrid" /> is set to false, 
	no translation is done.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveConstraint">
      <MemberSignature Language="C#" Value="public void RemoveConstraint (Dia.Constraint c);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="Dia.Constraint" />
      </Parameters>
      <Docs>
        <summary>Remove a constraint from the <see cref="T:Dia.Canvas" />.</summary>
        <param name="c">a <see cref="T:Dia.Constraint" /> to be removed.</param>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddConstraint">
      <MemberSignature Language="C#" Value="public void AddConstraint (Dia.Constraint c);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="Dia.Constraint" />
      </Parameters>
      <Docs>
        <summary>
	Add a <see cref="T:Dia.Constraint" /> to the 
	<see cref="T:Dia.Canvas" />' constraint <see cref="T:Dia.Solver" />.
	</summary>
        <param name="c">a <see cref="T:Dia.Constraint" /> to be added.</param>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearUndo">
      <MemberSignature Language="C#" Value="public void ClearUndo ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clear the undo stack.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Preserve">
      <MemberSignature Language="C#" Value="public void Preserve (GLib.Object objekt, string property_name, GLib.Value value, bool last);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objekt" Type="GLib.Object" />
        <Parameter Name="property_name" Type="System.String" />
        <Parameter Name="value" Type="GLib.Value" />
        <Parameter Name="last" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <summary>Put a variable on the undo stack.</summary>
        <param name="objekt">The <see cref="T:GLib.Object" /> that should be undone.</param>
        <param name="property_name">a <see cref="T:System.String" /> describing a property name.</param>
        <param name="value">a <see cref="T:GLib.Value" /> containing the data to be undone.</param>
        <param name="last">a <see cref="T:System.Boolean" /> which if true appends rather than prepends the property.</param>
        <remarks>
	The variable is described by its property name and the undo data.
	If an object/property_name combination is preserved multiple times, 
	only the first occurance is stored.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RedrawViews">
      <MemberSignature Language="C#" Value="public void RedrawViews ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
	This method will fire a <see cref="E:Dia.RedrawView" /> 
	that will cause all views to update and	redraw itself. 
	</summary>
        <remarks>
	There are very few cases in which this method is useful.
	Calling this method often will dramatically reduce the 
	speed of the <see cref="T:Dia.Canvas" />.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="GlueHandle">
      <MemberSignature Language="C#" Value="public double GlueHandle (Dia.Handle handle, double dest_x, double dest_y, out double glue_x, out double glue_y, Dia.CanvasItem item);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="Dia.Handle" />
        <Parameter Name="dest_x" Type="System.Double" />
        <Parameter Name="dest_y" Type="System.Double" />
        <Parameter Name="glue_x" Type="System.Double" RefType="out" />
        <Parameter Name="glue_y" Type="System.Double" RefType="out" />
        <Parameter Name="item" Type="Dia.CanvasItem" />
      </Parameters>
      <Docs>
        <summary>
	Find a point to glue a handle to.
	</summary>
        <param name="handle">a <see cref="T:Dia.Handle" /> to be glued to an item somewhere on the <see cref="T:Dia.Canvas" />.</param>
        <param name="dest_x">a <see cref="T:System.Double" /> to be x position of the handle.</param>
        <param name="dest_y">a <see cref="T:System.Double" /> to be y position of the handle.</param>
        <param name="glue_x">a <see cref="T:System.Double" /> to be closest x glue point.</param>
        <param name="glue_y">a <see cref="T:System.Double" /> to be closest y glue point.</param>
        <param name="item">a <see cref="T:Dia.CanvasItem" /> the handle should connect to.</param>
        <returns>a <see cref="T:System.Double" /> representing 	the 
	distance from the handle to the closest connection point.
	</returns>
        <remarks>
	Point (dest_x, dest_y) is the position where the handle should move to if 
	no glue point is found. This can be useful if the handle is in a motion 
	and you have to calculate the place where the handle should move to.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateNow">
      <MemberSignature Language="C#" Value="public void UpdateNow ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
	Force an update of the internal state of the canvas. 
	</summary>
        <remarks>
	This will set the <see cref="T:Dia.Canvas" /> in a 
	consistent state by running the 
	<see cref="M:Dia.CanvasItem.UpdateNow" /> of every 
	<see cref="T:Dia.CanvasItem" /> that requested an update.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveNow">
      <MemberSignature Language="C#" Value="public void ResolveNow ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
	Ask the constraint <see cref="T:Dia.Solver" /> 
	to resolve it's constraints.
	</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindObjectsInRectangle">
      <MemberSignature Language="C#" Value="public GLib.List FindObjectsInRectangle (Dia.Rectangle rect);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>GLib.List</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="Dia.Rectangle" />
      </Parameters>
      <Docs>
        <summary>Find all objects that are within rectangle and return them.</summary>
        <param name="rect">
	a <see cref="T:Dia.Rectangle" /> that determines the 
	boundries in which objects should live.
	</param>
        <returns>a <see cref="T:GLib.List" /> of objects that are within the rectangle.</returns>
        <remarks>
	Note that the root object is not included in the selection, 
	only non-composite leaf objects are selected.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopUndo">
      <MemberSignature Language="C#" Value="public void PopUndo ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Undo a set of actions.</summary>
        <remarks>Undone actions are stored on the redo-stack, so they can be undone too.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Canvas ();" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>Create a new <see cref="T:Dia.Canvas" />.</summary>
        <returns>a <see cref="T:Dia.Canvas" /></returns>
      </Docs>
    </Member>
    <Member MemberName="GType">
      <MemberSignature Language="C#" Value="public static GLib.GType GType { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>GLib.GType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type for the <see cref="T:Dia.Canvas" /></summary>
        <returns>A <see cref="T:GLib.GType" /> representing this type</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GridColor">
      <MemberSignature Language="C#" Value="public ulong GridColor { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <summary>Gets or sets the color of the grid points.</summary>
        <param name="value">a <see cref="T:System.UInt64" /></param>
        <returns>a <see cref="T:System.UInt64" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GridOfsX">
      <MemberSignature Language="C#" Value="public double GridOfsX { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <summary>Gets or sets an addition offset to the grid points.</summary>
        <param name="value">a <see cref="T:System.Double" /></param>
        <returns>a <see cref="T:System.Double" /></returns>
        <remarks>Make sure that the offset is less than <see cref="P:GridIntX" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GridOfsY">
      <MemberSignature Language="C#" Value="public double GridOfsY { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <summary>Gets or sets an addition offset to the grid points.</summary>
        <param name="value">a <see cref="T:System.Double" /></param>
        <returns>a <see cref="T:System.Double" /></returns>
        <remarks>Make sure that the offset is less than <see cref="P:GridIntY" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StaticExtents">
      <MemberSignature Language="C#" Value="public bool StaticExtents { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <summary>
	Gets or sets the ability of the 
	<see cref="T:Dia.Canvas" /> to dynamically resize.
	</summary>
        <param name="value">a <see cref="T:System.Boolean" /></param>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>
	Normally, when false, the boundries of the canvas will grow or shrink 
	depending on the position of the objects, in other words the placement of 
	the objects determine the actual size of the <see cref="T:Dia.Canvas" />.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowUndo">
      <MemberSignature Language="C#" Value="public bool AllowUndo { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <summary>Gets or sets the allowance of undo on the <see cref="T:Dia.Canvas" />.</summary>
        <param name="value">a <see cref="T:System.Boolean" /></param>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SnapToGrid">
      <MemberSignature Language="C#" Value="public bool SnapToGrid { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <summary>Sets or gets the snap to grid ability of the <see cref="T:Dia.Canvas" />.</summary>
        <param name="value">a <see cref="T:System.Boolean" /></param>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowStateRequests">
      <MemberSignature Language="C#" Value="public bool AllowStateRequests { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <summary>
	Sets or gets the ability of <see cref="T:Dia.CanvasItem" />s to 
	query their visual state. Ex. selected, focused and grabbed state.
	</summary>
        <param name="value">a <see cref="T:System.Boolean" /></param>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Extents">
      <MemberSignature Language="C#" Value="public Dia.Rectangle Extents { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Dia.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Dia.Rectangle" />
      </Parameters>
      <Docs>
        <summary>Gets or sets the boundries for the <see cref="T:Dia.Canvas" />.</summary>
        <param name="value">a <see cref="T:Dia.Rectangle" /></param>
        <returns>a <see cref="T:Dia.Rectangle" /></returns>
        <remarks>Use this in combination with <see cref="P:Dia.Canvas.StaticExtents" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GridIntX">
      <MemberSignature Language="C#" Value="public double GridIntX { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <summary>Gets or sets the X interval for the grid, in other words the space between grid points.</summary>
        <param name="value">a <see cref="T:System.Double" /></param>
        <returns>a <see cref="T:System.Double" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GridIntY">
      <MemberSignature Language="C#" Value="public double GridIntY { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <summary>Gets or set the Y interval for the grid, in other words the space between grid points.</summary>
        <param name="value">a <see cref="T:System.Double" /></param>
        <returns>a <see cref="T:System.Double" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GridBg">
      <MemberSignature Language="C#" Value="public ulong GridBg { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <summary>Gets or sets the grid background color.</summary>
        <param name="value">a <see cref="T:System.UInt64" /></param>
        <returns>a <see cref="T:System.UInt64" /></returns>
        <remarks>Note that this is also the <see cref="T:Dia.Canvas" /> background color.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UndoDepth">
      <MemberSignature Language="C#" Value="public uint UndoDepth { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the amount of undo entries on the undo stack.</summary>
        <returns>a <see cref="T:System.UInt32" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UndoStackDepth">
      <MemberSignature Language="C#" Value="public uint UndoStackDepth { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <summary>Sets or gets the depth of the undo / redo stack.</summary>
        <param name="value">a <see cref="T:System.UInt32" /></param>
        <returns>a <see cref="T:System.UInt32" /></returns>
        <remarks>The default depth is 10.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RedoDepth">
      <MemberSignature Language="C#" Value="public uint RedoDepth { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the amount of undo entries on the redo stack.</summary>
        <returns>a <see cref="T:System.UInt32" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Root">
      <MemberSignature Language="C#" Value="public Dia.CanvasGroup Root { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Dia.CanvasGroup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the root item in the <see cref="T:Dia.Canvas" />.</summary>
        <returns>a <see cref="T:Dia.CanvasGroup" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PangoLayout">
      <MemberSignature Language="C#" Value="public Pango.Layout PangoLayout { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Pango.Layout</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the <see cref="T:Pango.Layout" /> of the <see cref="T:Dia.Canvas" />.</summary>
        <returns>a <see cref="T:Pango.Layout" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="protected override void Finalize ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disposes the resources associated with the object.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Canvas (GLib.GType gtype);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="gtype" Type="GLib.GType" />
      </Parameters>
      <Docs>
        <summary>Internal constructor.</summary>
        <param name="gtype">a <see cref="T:GLib.GType" /> for the this type.</param>
        <returns>a <see cref="T:Dia.Canvas" /> created using the provided <see cref="T:GLib.GType" />.</returns>
        <remarks>This is a constructor used by derivative types that would have their own <see cref="T:GLib.GType" /> assigned to it. This is not typically used by C# code.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Canvas (IntPtr raw);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="raw" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <summary>Internal constructor.</summary>
        <param name="raw">a <see cref="T:System.IntPtr" /> to the C object.</param>
        <returns>a <see cref="T:Dia.Canvas" /> wrapping the C object.</returns>
        <remarks>This is an internal constructor, and should not be used by user code.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtentsChanged">
      <MemberSignature Language="C#" Value="public event Dia.ExtentsChangedHandler ExtentsChanged;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>Dia.ExtentsChangedHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
	This event is fired when the <see cref="P:Dia.Canvas.Extents" /> 
	of the <see cref="T:Dia.Canvas" /> changes.
	</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RedrawView">
      <MemberSignature Language="C#" Value="public event EventHandler RedrawView;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
	When this event is fired all <see cref="T:Dia.CanvasView" />s 
        are forced to redraw.
	</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Undo">
      <MemberSignature Language="C#" Value="public event EventHandler Undo;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
	 This event is fired every time a undo or redo action is done and
         every time undo information is added to the undo stack. 
	</summary>
        <remarks>
	User interfaces can connect to this event and update UI content, 
	for example undo and redo buttons.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="OverrideRedrawView">
      <MemberSignature Language="C#" Value="protected static void OverrideRedrawView (GLib.GType gtype);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gtype" Type="GLib.GType" />
      </Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="gtype">a <see cref="T:GLib.GType" /></param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="OverrideUndo">
      <MemberSignature Language="C#" Value="protected static void OverrideUndo (GLib.GType gtype);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gtype" Type="GLib.GType" />
      </Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="gtype">a <see cref="T:GLib.GType" /></param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="OverrideExtentsChanged">
      <MemberSignature Language="C#" Value="protected static void OverrideExtentsChanged (GLib.GType gtype);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gtype" Type="GLib.GType" />
      </Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="gtype">a <see cref="T:GLib.GType" /></param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRedrawView">
      <MemberSignature Language="C#" Value="protected virtual void OnRedrawView ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUndo">
      <MemberSignature Language="C#" Value="protected virtual void OnUndo ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnExtentsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnExtentsChanged (Dia.Rectangle new_extents);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="new_extents" Type="Dia.Rectangle" />
      </Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="new_extents">a <see cref="T:Dia.Rectangle" /></param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
  </Members>
</Type>