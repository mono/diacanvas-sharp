Index: dia-canvas-item.c
===================================================================
RCS file: /cvsroot/diacanvas/diacanvas2/src/dia-canvas-item.c,v
retrieving revision 1.80
diff -u -r1.80 dia-canvas-item.c
--- dia-canvas-item.c	20 Jul 2003 14:14:21 -0000	1.80
+++ dia-canvas-item.c	23 Aug 2003 18:35:54 -0000
@@ -385,7 +385,7 @@
 #endif
 
 	if (item->parent)
-		dia_canvas_groupable_remove_destruction (DIA_CANVAS_GROUPABLE (item->parent), item);
+		dia_canvas_item_remove_destruction (item->parent, item);
 
 #ifdef ENABLE_DEBUG
 	g_assert (item->parent == NULL);
@@ -545,7 +545,7 @@
 {
 	g_assert (DIA_IS_CANVAS_ITEM (item));
 	if (new_parent)
-		g_assert (DIA_IS_CANVAS_GROUPABLE (new_parent));
+		g_assert (DIA_IS_CANVAS_ITEM (new_parent));
 
 	/* Notify is filtered, so only one parent notification will be emited */
 	g_object_freeze_notify (G_OBJECT(item));
@@ -1646,34 +1646,34 @@
 }
 
 /**
- * dia_canvas_groupable_add_construction:
- * @group: 
+ * dia_canvas_item_add_construction:
+ * @parent: 
  * @item: 
  *
  * This function can be used to add child items during the construction
- * of an object. This function fixes the item -> group relationship.
+ * of an object. This function fixes the item -> parent relationship.
  *
  **/
 void
-dia_canvas_groupable_add_construction (DiaCanvasGroupable *group,
-				       DiaCanvasItem *item)
+dia_canvas_item_add_construction (DiaCanvasItem *parent,
+				  DiaCanvasItem *item)
 {
-	g_return_if_fail (DIA_IS_CANVAS_GROUPABLE (group));
+	g_return_if_fail (DIA_IS_CANVAS_ITEM (parent));
 	g_return_if_fail (DIA_IS_CANVAS_ITEM (item));
 	g_return_if_fail (item->parent == NULL);
-	g_return_if_fail (item->parent != DIA_CANVAS_ITEM (group));
-	if (DIA_CANVAS_ITEM_COMPOSITE (group))
+	g_return_if_fail (item->parent != parent);
+	if (DIA_CANVAS_ITEM_COMPOSITE (parent))
 		g_return_if_fail (DIA_CANVAS_ITEM_COMPOSITE (item));
 
-	dia_canvas_item_set_parent (item, DIA_CANVAS_ITEM (group));
+	dia_canvas_item_set_parent (item, parent);
 
 	/* First set the canvas, so undo info can be saved... */
-	//item->canvas = group->canvas;
+	//item->canvas = parent->canvas;
 	//dia_canvas_item_preserve_property (item, "parent");
-	//item->parent = group;
+	//item->parent = parent;
 
 	/* Automatically set item->parent to NULL on destruction. */
-	//g_object_add_weak_pointer (G_OBJECT (group),
+	//g_object_add_weak_pointer (G_OBJECT (parent),
 	//			   (gpointer) &item->parent);
 
 	/* Also reset the canvas pointer on destruction. */
@@ -1722,30 +1722,30 @@
 	g_signal_emit_by_name (group, "add", item, &retval);
 	
 	if (retval) {
-		dia_canvas_groupable_add_construction (group, item);
+		dia_canvas_item_add_construction (DIA_CANVAS_ITEM (group), item);
 	}
 	return retval;
 }
 
 /**
- * dia_canvas_groupable_remove_destruction:
- * @group: 
+ * dia_canvas_item_remove_destruction:
+ * @parent: 
  * @item: 
  *
  * This function can be used during the dipose phase of the destruction.
  * The item is properly disconnected from the parent. Note that this
- * function should be used when dia_canvas_groupable_add_construction() is
- * used to connect @item to @group.
+ * function should be used when dia_canvas_item_add_construction() is
+ * used to connect @item to @parent.
  *
  * This function should only be used in #DiaCanvasItem deriviates.
  **/
 void
-dia_canvas_groupable_remove_destruction (DiaCanvasGroupable *group,
-					 DiaCanvasItem *item)
+dia_canvas_item_remove_destruction (DiaCanvasItem *parent,
+				    DiaCanvasItem *item)
 {
-	g_return_if_fail (DIA_IS_CANVAS_GROUPABLE (group));
+	g_return_if_fail (DIA_IS_CANVAS_ITEM (parent));
 	g_return_if_fail (DIA_IS_CANVAS_ITEM (item));
-	g_return_if_fail (item->parent == DIA_CANVAS_ITEM (group));
+	g_return_if_fail (item->parent == parent);
 
 	dia_canvas_item_set_parent (item, NULL);
 
@@ -1777,7 +1777,7 @@
 	g_signal_emit_by_name (group, "remove", item, &retval);
 
 	if (retval) {
-		dia_canvas_groupable_remove_destruction (group, item);
+		dia_canvas_item_remove_destruction (DIA_CANVAS_ITEM (group), item);
 	}
 	g_object_unref (item);
 
